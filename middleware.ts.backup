import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  // Protect /dashboard and /admin routes
  if (req.nextUrl.pathname.startsWith('/dashboard') || req.nextUrl.pathname.startsWith('/admin')) {
    if (!session) {
      return NextResponse.redirect(new URL('/login', req.url))
    }

    // Check if accessing admin route
    if (req.nextUrl.pathname.startsWith('/admin')) {
      const { data: userRole } = await supabase
        .from('user_roles')
        .select('role')
        .eq('id', session.user.id)
        .single()

      if (userRole?.role !== 'admin') {
        return NextResponse.redirect(new URL('/dashboard', req.url))
      }
    }
  }
  return res
}

export const config = {
  matcher: ['/dashboard/:path*', '/admin/:path*'],
}